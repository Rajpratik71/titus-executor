syntax = "proto3";
package com.netflix.titus.executor.vpc;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "netflix/titus/titus_base.proto";

option go_package = "vpcapi";

message Address {
    string address = 1;
}

// This is embedded in responses / replies so that a given IP Service Server may cache data from AWS. Since the client
// is the only one ever going to make requests for that given ENI, it can take a lock on that ENI. If the cache version
// the client presents is not present, or it is different from the one the server has, the server must refresh its
// state from AWS
message CacheVersion {
    bytes uuid = 1;
}

message NetworkInterfaceAttachment {
    // 0-indexed
    uint32 deviceIndex = 1;
    string id = 2;
};

message NetworkInterface {
    string subnetId = 1;
    string availabilityZone = 2;
    string macAddress = 3;
    string networkInterfaceId = 4;
    string ownerAccountId = 5;
    NetworkInterfaceAttachment networkInterfaceAttachment = 7;
    string vpcId = 8;
};

message InstanceIdentity {
    // This is duplicated data , but we include it for verification beyond Metatron. No containers should run
    // on the instance prior to this API call being completed. We can then rely on the instance
    // identity document for further verification.
    string instanceIdentityDocument = 1;
    string instanceIdentitySignature = 2;
    string instanceID = 3;
    string region = 4;
    string accountID = 5;
    string instanceType = 6;
}

// ProvisionInstanceRequest is called when the instance is first initialized, in order to configure its interfaces,
// and other network capabilities.
// The provisioning service decides which account / subnet / VPC the interface will live in.
message ProvisionInstanceRequest {
    InstanceIdentity instanceIdentity = 1;
    // If accountID and subnetID are not specified then the titusvpcservice will decide on their behalf
    string accountID = 2;
    string subnetID = 3;
};

message ProvisionInstanceResponse {
    // In this, the deviceIndex, macAddress, and networkInterfaceId must be unique in this list.
    repeated NetworkInterface networkInterfaces = 1;
    CacheVersion cacheVersion = 2;
};

message ProvisionInstanceRequestV2 {
    InstanceIdentity instanceIdentity = 1;
}

message ProvisionInstanceResponseV2 {
    NetworkInterface trunkNetworkInterface = 1;
};

message UtilizedAddress {
    Address address = 1;
    google.protobuf.Timestamp lastUsedTime = 2;
}

message AssignIPRequest {
    CacheVersion cacheVersion = 1;
    NetworkInterfaceAttachment networkInterfaceAttachment = 3;
    repeated string securityGroupIds = 4;
    bool ipv6AddressRequested = 5;
    repeated UtilizedAddress utilizedAddresses = 6;
    InstanceIdentity instanceIdentity = 7;
    bool allowSecurityGroupChange = 8;
    // This is optional. If it is not specified then we will assign a "random" IP to the interface
    repeated com.netflix.titus.SignedAddressAllocation signedAddressAllocations = 9;
};

message AssignIPResponse {
    CacheVersion cacheVersion = 1;
    // A batch of IPs may be given back. It is up to the client to figure out what IPs it can use.
    repeated UsableAddress usableAddresses = 2;
    NetworkInterface networkInterface = 3;
    repeated string securityGroupIds = 4;
};


message AssignIPRequestV2 {
    NetworkInterfaceAttachment networkInterfaceAttachment = 1;
    repeated string securityGroupIds = 2;
    oneof ipv6 {
        bool ipv6AddressRequested = 3;
    }
    oneof ipv4 {
        bool ipv4AddressRequested = 5;
        com.netflix.titus.SignedAddressAllocation ipv4SignedAddressAllocation = 6;
    }
    repeated UtilizedAddress utilizedAddresses = 7;
    InstanceIdentity instanceIdentity = 8;
    bool allowSecurityGroupChange = 9;
    string accountID = 10;
    // This is optional. If it is not specified then we will assign a "random" IP to the interface
};

message AssignIPResponseV2 {
    UsableAddress ipv4address = 1;
    UsableAddress ipv6address = 2;
    NetworkInterface branchNetworkInterface = 3;
    NetworkInterface trunkNetworkInterface = 4;
    uint32 vlanId = 5;
};

message elasticAddressSet {
    repeated string elasticAddresses = 1;
};

message AssignIPRequestV3 {
    string taskId = 1;
    repeated string securityGroupIds = 2;
    oneof ipv6 {
        bool ipv6AddressRequested = 3;
    }
    oneof ipv4 {
        bool ipv4AddressRequested = 4;
        com.netflix.titus.SignedAddressAllocation ipv4SignedAddressAllocation = 5;
    }
    repeated string subnets = 7;
    // This identifies the trunk ENI
    InstanceIdentity instanceIdentity = 8;
    string accountID = 9;
    oneof elasticAddress {
        google.protobuf.Empty empty = 10;
        elasticAddressSet elasticAdddresses  = 11;
        string groupName = 12;
    }
};

message ElasticAddress {
    string ip = 1;
    string allocationId = 2;
    string associationdId = 3;
}

message AssignIPResponseV3 {
    UsableAddress ipv4address = 1;
    UsableAddress ipv6address = 2;
    NetworkInterface branchNetworkInterface = 3;
    NetworkInterface trunkNetworkInterface = 4;
    uint32 vlanId = 5;
    ElasticAddress elasticAddress = 6;
};

message UnassignIPRequestV3 {
    string taskId = 1;
};

message UnassignIPResponseV3 {
    string taskId = 1;
};

message UsableAddress {
    Address address = 1;
    uint32 prefixLength = 2;
};

// AddressGCMetadata is sent when the instance requests that the IP Service GC it. It's basically a way to
// indicate when the IP was last used, and we can GC it based on that metadata.
message GCRequest {
    CacheVersion cacheVersion = 1;
    InstanceIdentity instanceIdentity = 2;
    NetworkInterfaceAttachment networkInterfaceAttachment = 3;
    // unallocatedAddresses are addresses we were able to take a lock on
    repeated UtilizedAddress unallocatedAddresses = 4;
    // nonviableAddresses are addresses which we found found in the store, but we decided not to nominate
    // for GC, because they've been bumped recently
    repeated UtilizedAddress nonviableAddresses = 5;
    // allocatedAddresses are addresses currently in use.
    repeated UtilizedAddress allocatedAddresses = 6;
}

message GCResponse {
    CacheVersion cacheVersion = 1;
    repeated Address addressToBump = 2;
    repeated Address addressToDelete = 3;
}

message GCRequestV2 {
    InstanceIdentity instanceIdentity = 1;
    NetworkInterfaceAttachment networkInterfaceAttachment = 2;
    // unallocatedAddresses are addresses we were able to take a lock on
    repeated Address unallocatedAddresses = 3;
    // allocatedAddresses are addresses currently in use.
    repeated Address allocatedAddresses = 4;
}

message GCResponseV2 {
    repeated Address addressToDelete = 1;
}


message GCRequestV3 {
    InstanceIdentity instanceIdentity = 1;
    repeated string runningTaskIDs = 2;
}

message GCResponseV3 {

}

message RefreshIPRequest {
    repeated UtilizedAddress utilizedAddress = 1;
    NetworkInterface branchNetworkInterface = 2;
}

message RefreshIPResponse {
    google.protobuf.Duration nextRefresh = 1;
}

message GCSetupRequest {
    InstanceIdentity instanceIdentity = 1;
}

message GCSetupResponse {
    repeated NetworkInterfaceAttachment networkInterfaceAttachment = 1;
}

message GCLegacySetupRequest {
    InstanceIdentity instanceIdentity = 1;
}

message GCLegacySetupResponse {
    repeated NetworkInterfaceAttachment networkInterfaceAttachment = 1;
}

message LockId {
    string id = 1;
}

message Lock {
    string id = 1;
    string lockName = 2;
    string heldBy = 3;
    uint64 heldUntil = 4;
}

message GetLocksResponse {
    repeated Lock locks = 1;
}

service TitusAgentVPCService {
    // This ProvisionInstance function has to be called at startup of the instance, and it is idempotent.
    rpc ProvisionInstance (ProvisionInstanceRequest) returns (ProvisionInstanceResponse);
    rpc ProvisionInstanceV2 (ProvisionInstanceRequestV2) returns (ProvisionInstanceResponseV2);

    rpc AssignIP (AssignIPRequest) returns (AssignIPResponse);
    rpc AssignIPV2   (AssignIPRequestV2) returns (AssignIPResponseV2);
    rpc AssignIPV3 (AssignIPRequestV3) returns (AssignIPResponseV3);
    rpc UnassignIPV3 (UnassignIPRequestV3) returns (UnassignIPResponseV3);
    rpc RefreshIP (RefreshIPRequest) returns (RefreshIPResponse);
    // GC extra IPs
    rpc GCSetupLegacy (GCLegacySetupRequest) returns (GCLegacySetupResponse);
    rpc GC (GCRequest) returns (GCResponse);
    rpc GCSetup (GCSetupRequest) returns (GCSetupResponse);
    rpc GCV2 (GCRequestV2) returns (GCResponseV2);
    rpc GCV3 (GCRequestV3) returns (GCResponseV3);

    // Lock Management
    rpc GetLocks(google.protobuf.Empty) returns (GetLocksResponse);
    rpc GetLock(LockId) returns (Lock);
    rpc DeleteLock(LockId) returns (google.protobuf.Empty);
}

message PrivateKey {
    string hostname = 1;
    google.protobuf.Timestamp generated = 2;
    message Ed25519Key {
        bytes rfc8032key = 1;
    };
    oneof key {
        Ed25519Key ed25519Key = 3;
    };
}